[{"path":"index.html","id":"home","chapter":"Home","heading":"Home","text":"website summer course “Introduction R Data Science” BEST 2024 program.","code":""},{"path":"index.html","id":"authors","chapter":"Home","heading":"Authors","text":"","code":""},{"path":"index.html","id":"instructor","chapter":"Home","heading":"Instructor","text":"Safiya N. Sirota, sns2189@cumc.columbia.edu","code":""},{"path":"index.html","id":"teaching-assistant","chapter":"Home","heading":"Teaching Assistant","text":"Pei Tian, pt2632@cumc.columbia.eduOffice Hours:  Wed 1:00pm - 2:00pm","code":""},{"path":"index.html","id":"contents","chapter":"Home","heading":"Contents","text":"","code":""},{"path":"index.html","id":"lectures","chapter":"Home","heading":"Lectures","text":"TBD","code":""},{"path":"index.html","id":"recitations","chapter":"Home","heading":"Recitations","text":"Recitation 1 - Basic SetupRecitation 2 - Pipe OperatorRecitation 3 - Data Manipulation IRecitation 4 - Data Mainpulation II","code":""},{"path":"index.html","id":"usage","chapter":"Home","heading":"Usage","text":"Open lecture notes follow steps complete objectives.question, please email pt2632@cumc.columbia.edu.","code":""},{"path":"recitation-1.html","id":"recitation-1","chapter":"1 Recitation 1","heading":"1 Recitation 1","text":"","code":""},{"path":"recitation-1.html","id":"objectives","chapter":"1 Recitation 1","heading":"1.1 Objectives","text":"Download R RStudioCreate R projectGet familiar .R script .Rmd notebookVariablesR Objects","code":""},{"path":"recitation-1.html","id":"download-softwares","chapter":"1 Recitation 1","heading":"1.2 Download Softwares","text":"","code":""},{"path":"recitation-1.html","id":"installing-r","chapter":"1 Recitation 1","heading":"1.2.1 Installing R","text":"","code":""},{"path":"recitation-1.html","id":"windows","chapter":"1 Recitation 1","heading":"1.2.1.1 Windows","text":"Go CRAN R Project website.Click link download R Windows.Click “base” link.Click “Download R Windows” link download installer.installer downloaded, open follow -screen instructions complete installation.","code":""},{"path":"recitation-1.html","id":"macos","chapter":"1 Recitation 1","heading":"1.2.1.2 macOS","text":"Go CRAN R Project website.Click link download R macOS.Click .pkg file link download installer.installer downloaded, open follow -screen instructions complete installation.","code":""},{"path":"recitation-1.html","id":"installing-rstudio","chapter":"1 Recitation 1","heading":"1.2.2 Installing RStudio","text":"","code":""},{"path":"recitation-1.html","id":"windows-1","chapter":"1 Recitation 1","heading":"1.2.2.1 Windows","text":"Go RStudio website.“Installers Supported Platforms” section, click link Windows download installer.installer downloaded, open follow -screen instructions complete installation.","code":""},{"path":"recitation-1.html","id":"macos-1","chapter":"1 Recitation 1","heading":"1.2.2.2 macOS","text":"Go RStudio website.“Installers Supported Platforms” section, click link macOS download installer.installer downloaded, open follow -screen instructions complete installation.","code":""},{"path":"recitation-1.html","id":"create-your-first-project","chapter":"1 Recitation 1","heading":"1.3 Create Your First Project","text":"Open RStudio: Launch RStudio installation.Create New Project:\nGo File > New Project.\nChoose New Directory, New Project.\nSelect folder computer want save project.\nClick Create Project.\nGo File > New Project.Choose New Directory, New Project.Select folder computer want save project.Click Create Project.sets new R project can start writing organizing R scripts data files.","code":""},{"path":"recitation-1.html","id":"different-files","chapter":"1 Recitation 1","heading":"1.4 Different Files","text":"","code":""},{"path":"recitation-1.html","id":"r-script","chapter":"1 Recitation 1","heading":"1.4.1 .R Script","text":".R files simple text files containing R code. used writing running R scripts, can include data analysis, data manipulation, plotting commands.Creating .R Script:\n1. RStudio, go File > New File > R Script.Write R code script editor.Write R code script editor.Save file .R extension.Save file .R extension.","code":""},{"path":"recitation-1.html","id":"rmd-rmarkdown","chapter":"1 Recitation 1","heading":"1.4.2 .Rmd Rmarkdown","text":".Rmd (R Markdown) files used creating dynamic documents combine code, text, visualizations. ideal reports, presentations, reproducible research.Creating .Rmd Notebook:\n1. RStudio, go File > New File > R Markdown.\n2. Choose type output (e.g., HTML, PDF, Word).\n3. Write code narrative text R Markdown editor.\n4. Use R code chunks (``{r}) embed R code. 5. Click theKnit` button generate final document.Keyboard Shortcuts: ","code":""},{"path":"recitation-1.html","id":"variables","chapter":"1 Recitation 1","heading":"1.5 Variables","text":"","code":""},{"path":"recitation-1.html","id":"coming-up-with-variable-names","chapter":"1 Recitation 1","heading":"1.5.1 Coming up with variable names","text":"Use concise meaningful names variables. Object names must start letter can contain letters, numbers, **** .\nBase R uses dots function names (ex: contrib.url()) class names (ex: data.frame). recommend snake_case can separate words .","code":""},{"path":"recitation-1.html","id":"numeric","chapter":"1 Recitation 1","heading":"1.5.2 Numeric","text":"Numeric variables store numbers can either integers doubles (floating-point numbers).","code":"\nx <- 42  # integer\ny = 3.14  # double\n# addition \nx + y## [1] 45.14\n# substraction\nx - y## [1] 38.86\n# multiplication\nx * y## [1] 131.88\n# division\nx / y## [1] 13.3758\n# mod\nx %% 9## [1] 6"},{"path":"recitation-1.html","id":"string","chapter":"1 Recitation 1","heading":"1.5.3 String","text":"String variables store text data created enclosing text quotes.","code":"\nname <- \"John Doe\"\nmessage <- \"Hello, world!\""},{"path":"recitation-1.html","id":"logical","chapter":"1 Recitation 1","heading":"1.5.4 Logical","text":"Logical variable store data value TRUE FALSE.","code":"\ncorrect = TRUE\ncorrect = T\nwrong = FALSE\nwrong = F"},{"path":"recitation-1.html","id":"r-objects","chapter":"1 Recitation 1","heading":"1.6 R Objects","text":"","code":""},{"path":"recitation-1.html","id":"tips","chapter":"1 Recitation 1","heading":"1.6.1 Tips","text":"know everything R programming following command:","code":"\n# help document for function\n?mean\n\n# help document for package\n??MASS"},{"path":"recitation-1.html","id":"vector","chapter":"1 Recitation 1","heading":"1.6.2 Vector","text":"Vectors one-dimensional arrays can hold numeric, string, logical data. created using c() function.","code":"\nnum_vector <- c(1, 2, 3, 4, 5)\nstr_vector <- c(\"apple\", \"banana\", \"cherry\")"},{"path":"recitation-1.html","id":"list","chapter":"1 Recitation 1","heading":"1.6.3 List","text":"Lists versatile data structures can hold different types data, including lists.","code":"\n# definition\nmy_list <- list(name = \"John\", age = 30, scores = c(90, 85, 88))\n# slice\nmy_list[1:2]## $name\n## [1] \"John\"\n## \n## $age\n## [1] 30\n# pull out element\nmy_list[[1]]## [1] \"John\"\nmy_list[[\"name\"]]## [1] \"John\"\nmy_list$name## [1] \"John\""},{"path":"recitation-1.html","id":"factor","chapter":"1 Recitation 1","heading":"1.6.4 Factor","text":"Factors used represent categorical data useful statistical modeling.","code":"\ncolors <- factor(c(\"red\", \"blue\", \"green\", \"blue\", \"red\"))\ncolors## [1] red   blue  green blue  red  \n## Levels: blue green red"},{"path":"recitation-1.html","id":"matrix","chapter":"1 Recitation 1","heading":"1.6.5 Matrix","text":"Matrices two-dimensional arrays hold numeric data. created using matrix() function.","code":"\nmy_matrix <- matrix(1:9, nrow = 3, ncol = 3)\nmy_matrix##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9"},{"path":"recitation-1.html","id":"dataframe","chapter":"1 Recitation 1","heading":"1.6.6 DataFrame","text":"DataFrames table-like structures can hold different types data columns, making ideal datasets.basics, able get started first R project, create different types files, understand fundamental data structures R.","code":"\ninstall.packages(\"nycflights13\")\nlibrary(nycflights13)\n\nflights## # A tibble: 336,776 × 19\n##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n##    <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n##  1  2013     1     1      517            515         2      830            819\n##  2  2013     1     1      533            529         4      850            830\n##  3  2013     1     1      542            540         2      923            850\n##  4  2013     1     1      544            545        -1     1004           1022\n##  5  2013     1     1      554            600        -6      812            837\n##  6  2013     1     1      554            558        -4      740            728\n##  7  2013     1     1      555            600        -5      913            854\n##  8  2013     1     1      557            600        -3      709            723\n##  9  2013     1     1      557            600        -3      838            846\n## 10  2013     1     1      558            600        -2      753            745\n## # ℹ 336,766 more rows\n## # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n## #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n## #   minute <dbl>, time_hour <dttm>\n# To view the structure of the df\nstr(flights)## tibble [336,776 × 19] (S3: tbl_df/tbl/data.frame)\n##  $ year          : int [1:336776] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ...\n##  $ month         : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n##  $ day           : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n##  $ dep_time      : int [1:336776] 517 533 542 544 554 554 555 557 557 558 ...\n##  $ sched_dep_time: int [1:336776] 515 529 540 545 600 558 600 600 600 600 ...\n##  $ dep_delay     : num [1:336776] 2 4 2 -1 -6 -4 -5 -3 -3 -2 ...\n##  $ arr_time      : int [1:336776] 830 850 923 1004 812 740 913 709 838 753 ...\n##  $ sched_arr_time: int [1:336776] 819 830 850 1022 837 728 854 723 846 745 ...\n##  $ arr_delay     : num [1:336776] 11 20 33 -18 -25 12 19 -14 -8 8 ...\n##  $ carrier       : chr [1:336776] \"UA\" \"UA\" \"AA\" \"B6\" ...\n##  $ flight        : int [1:336776] 1545 1714 1141 725 461 1696 507 5708 79 301 ...\n##  $ tailnum       : chr [1:336776] \"N14228\" \"N24211\" \"N619AA\" \"N804JB\" ...\n##  $ origin        : chr [1:336776] \"EWR\" \"LGA\" \"JFK\" \"JFK\" ...\n##  $ dest          : chr [1:336776] \"IAH\" \"IAH\" \"MIA\" \"BQN\" ...\n##  $ air_time      : num [1:336776] 227 227 160 183 116 150 158 53 140 138 ...\n##  $ distance      : num [1:336776] 1400 1416 1089 1576 762 ...\n##  $ hour          : num [1:336776] 5 5 5 5 6 5 6 6 6 6 ...\n##  $ minute        : num [1:336776] 15 29 40 45 0 58 0 0 0 0 ...\n##  $ time_hour     : POSIXct[1:336776], format: \"2013-01-01 05:00:00\" \"2013-01-01 05:00:00\" ...\n# Summary stats of the numeric variables\nsummary(flights)##       year          month             day           dep_time    sched_dep_time\n##  Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n##  1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n##  Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n##  Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n##  3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n##  Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n##                                                  NA's   :8255                 \n##    dep_delay          arr_time    sched_arr_time   arr_delay       \n##  Min.   : -43.00   Min.   :   1   Min.   :   1   Min.   : -86.000  \n##  1st Qu.:  -5.00   1st Qu.:1104   1st Qu.:1124   1st Qu.: -17.000  \n##  Median :  -2.00   Median :1535   Median :1556   Median :  -5.000  \n##  Mean   :  12.64   Mean   :1502   Mean   :1536   Mean   :   6.895  \n##  3rd Qu.:  11.00   3rd Qu.:1940   3rd Qu.:1945   3rd Qu.:  14.000  \n##  Max.   :1301.00   Max.   :2400   Max.   :2359   Max.   :1272.000  \n##  NA's   :8255      NA's   :8713                  NA's   :9430      \n##    carrier              flight       tailnum             origin         \n##  Length:336776      Min.   :   1   Length:336776      Length:336776     \n##  Class :character   1st Qu.: 553   Class :character   Class :character  \n##  Mode  :character   Median :1496   Mode  :character   Mode  :character  \n##                     Mean   :1972                                        \n##                     3rd Qu.:3465                                        \n##                     Max.   :8500                                        \n##                                                                         \n##      dest              air_time        distance         hour           minute     \n##  Length:336776      Min.   : 20.0   Min.   :  17   Min.   : 1.00   Min.   : 0.00  \n##  Class :character   1st Qu.: 82.0   1st Qu.: 502   1st Qu.: 9.00   1st Qu.: 8.00  \n##  Mode  :character   Median :129.0   Median : 872   Median :13.00   Median :29.00  \n##                     Mean   :150.7   Mean   :1040   Mean   :13.18   Mean   :26.23  \n##                     3rd Qu.:192.0   3rd Qu.:1389   3rd Qu.:17.00   3rd Qu.:44.00  \n##                     Max.   :695.0   Max.   :4983   Max.   :23.00   Max.   :59.00  \n##                     NA's   :9430                                                  \n##    time_hour                     \n##  Min.   :2013-01-01 05:00:00.00  \n##  1st Qu.:2013-04-04 13:00:00.00  \n##  Median :2013-07-03 10:00:00.00  \n##  Mean   :2013-07-03 05:22:54.64  \n##  3rd Qu.:2013-10-01 07:00:00.00  \n##  Max.   :2013-12-31 23:00:00.00  \n## \n# Finding the dimensions of the df\ndim(flights)## [1] 336776     19\n# Mean calculation\nmean(flights$distance)## [1] 1039.913\n# Mean calculation with NA clean\nmean(flights$distance, na.rm = TRUE)## [1] 1039.913\n# Max value\nmax(flights$air_time)## [1] NA\n# Max value with NA clean\nmax(flights$air_time, na.rm = TRUE)## [1] 695\n# Unique value\nunique(flights$dest)##   [1] \"IAH\" \"MIA\" \"BQN\" \"ATL\" \"ORD\" \"FLL\" \"IAD\" \"MCO\" \"PBI\" \"TPA\" \"LAX\" \"SFO\" \"DFW\"\n##  [14] \"BOS\" \"LAS\" \"MSP\" \"DTW\" \"RSW\" \"SJU\" \"PHX\" \"BWI\" \"CLT\" \"BUF\" \"DEN\" \"SNA\" \"MSY\"\n##  [27] \"SLC\" \"XNA\" \"MKE\" \"SEA\" \"ROC\" \"SYR\" \"SRQ\" \"RDU\" \"CMH\" \"JAX\" \"CHS\" \"MEM\" \"PIT\"\n##  [40] \"SAN\" \"DCA\" \"CLE\" \"STL\" \"MYR\" \"JAC\" \"MDW\" \"HNL\" \"BNA\" \"AUS\" \"BTV\" \"PHL\" \"STT\"\n##  [53] \"EGE\" \"AVL\" \"PWM\" \"IND\" \"SAV\" \"CAK\" \"HOU\" \"LGB\" \"DAY\" \"ALB\" \"BDL\" \"MHT\" \"MSN\"\n##  [66] \"GSO\" \"CVG\" \"BUR\" \"RIC\" \"GSP\" \"GRR\" \"MCI\" \"ORF\" \"SAT\" \"SDF\" \"PDX\" \"SJC\" \"OMA\"\n##  [79] \"CRW\" \"OAK\" \"SMF\" \"TUL\" \"TYS\" \"OKC\" \"PVD\" \"DSM\" \"PSE\" \"BHM\" \"CAE\" \"HDN\" \"BZN\"\n##  [92] \"MTJ\" \"EYW\" \"PSP\" \"ACK\" \"BGR\" \"ABQ\" \"ILM\" \"MVY\" \"SBN\" \"LEX\" \"CHO\" \"TVC\" \"ANC\"\n## [105] \"LGA\""},{"path":"recitation-1.html","id":"some-spacing-conventions","chapter":"1 Recitation 1","heading":"1.7 Some Spacing Conventions","text":"Include spaces +, -, *, /Don’t put spaces around ^ (e.g., 3^2)Don’t put spaces around : $Include spaces commas (e.g., c(0, 1, 2))","code":""},{"path":"recitation-1.html","id":"other-resource","chapter":"1 Recitation 1","heading":"1.8 Other Resource","text":"page touches conventions discussed (’re interested): http://adv-r..co.nz/Style.htmlMore Basics Workflow: https://stat545.com/r-basics.html","code":""},{"path":"recitation-2.html","id":"recitation-2","chapter":"2 Recitation 2","heading":"2 Recitation 2","text":"Today learned…Pipe operatorsImporting dataNow ’ll practice concepts (stuff Recitation 1).first step, together, setting project recitation.Make sure go Files pane, project icon top right, see working right project/directory.Next, load necessary packages first chunk code name chunk “setup” include = FALSE. can learn chunk options link: https://rmarkdown.rstudio.com/lesson-3.htmlNote: may one way code exercises.","code":""},{"path":"recitation-2.html","id":"part-i","chapter":"2 Recitation 2","heading":"2.1 Part I","text":"Create variable called numbers contains 1 10 characters two\nNAs (may anywhere vector).Omit NA’s numbers convert character variable numeric one. Save\nnew variable numbers. Use pipe operator: %>% |>.Mac shortcut: Shift + Command + MPC shortcut: Ctrl + Shift + MFind mean first 5 elements without typing numbers.Find mean first, third fifth elements without typing numbers.","code":"\nnumbers <- c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", rep(NA, 2))\nnumbers <- numbers |> \n  na.omit() |>\n  as.numeric()\nmean(numbers[1:5])## [1] 3\nmean(c(numbers[1], numbers[3], numbers[5]))## [1] 3"},{"path":"recitation-2.html","id":"part-ii","chapter":"2 Recitation 2","heading":"2.2 Part II","text":"Nice! completed Part .Now let’s load data part II.Data type:Write type variable.names: charactergender: characterage: characterheight: doubleweight: doublevaccinated: characterThe age variable numeric variable `vaccinated variable\nlogical variable, typos preventing .Fix typos use .numeric() .logical() convert .Summarize data using skimrTable 2.1: Data summaryVariable type: characterVariable type: logicalVariable type: numericUsing pipe operator, omit NAs weight variable find mean.Challenge! Take subset data vaccinated find \nmean age using [], $ %>%.","code":"\ndata_vacc <- read_csv(\"path/to/data_vacc.csv\")\ndata_vacc$age[1] <- 57\ndata_vacc$age <- as.numeric(data_vacc$age)\n\ndata_vacc$vaccinated[3] <- FALSE\ndata_vacc$vaccinated <- as.logical(data_vacc$vaccinated)\nskimr::skim(data_vacc)\ndata_vacc$weight %>%\n na.omit() %>%\n mean()## [1] 495\ndata_vacc[data_vacc$vaccinated == TRUE, ]$age %>%\n mean()## [1] 42.66667"},{"path":"recitation-2.html","id":"part-iii","chapter":"2 Recitation 2","heading":"2.3 Part III","text":"part, install MASS package call use session.Pull birthwt data frame assign object personal environment.Explore around!Make answer 2-3 (using pipes functions ’ve come across far) questions interest share approach class!","code":"\ninstall.packages(\"MASS\")"},{"path":"recitation-3.html","id":"recitation-3","chapter":"3 Recitation 3","heading":"3 Recitation 3","text":"Today learned…dplyr functions: select, filter, mutate, arrange, renameNow ’ll practice using functions refresh basics last week.Load necessary packages first chunk code (name chunk setup include = FALSE).Now, partner, please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-3.html","id":"part-i-1","chapter":"3 Recitation 3","heading":"3.1 Part I","text":"Print working directory show located appropriate place device.(Review) Create character vector called numbers, numbers 1 5 one NA. , use pipe operator convert numeric vector, omit NA’s, find mean. save mean (.e. use “<-” save operations numbers variable).(Review) Save diamonds.csv file Courseworks data folder current working directory. Load data frame save dat_diamond.Remove first column using one functions class. Make sure column gone view data frame.Find three unique ways select carat column (save column environment).Find mean carat column (save).Create variable called data_prem contains diamonds Premium cut. Also, rename “col” variable “color” create new column called “expensive” TRUE price $5,000 FALSE otherwise.Take dat_prem data set arrange price descending order. Use function head(5) print first 5 elements.","code":"\ngetwd()## [1] \"/Users/tptrix29/Developer/r-tutorials\"\nnumbers <- c(\"1\", \"2\", \"3\", \"4\", \"5\", NA)\n\nnumbers %>% \n  as.numeric() %>% \n  na.omit() %>% \n  mean()## [1] 3\ndat_diamond <- read_csv(\"dataset/diamonds.csv\")## New names:\n## Rows: 53940 Columns: 11\n## ── Column specification\n## ──────────────────────────────────────────────────────────── Delimiter: \",\" chr\n## (3): cut, col, clarity dbl (8): ...1, carat, depth, table, price, x, y, z\n## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify\n## the column types or set `show_col_types = FALSE` to quiet this message.\n## • `` -> `...1`\ndat_diamond <- dat_diamond %>% select(-1)\n\ndat_diamond <- dat_diamond %>% select(carat:z)\n# Method 1\ndat_diamond %>% select(\"carat\")## # A tibble: 53,940 × 1\n##    carat\n##    <dbl>\n##  1  0.23\n##  2  0.21\n##  3  0.23\n##  4  0.29\n##  5  0.31\n##  6  0.24\n##  7  0.24\n##  8  0.26\n##  9  0.22\n## 10  0.23\n## # ℹ 53,930 more rows\n# Method 2\ndat_diamond %>% select(carat)## # A tibble: 53,940 × 1\n##    carat\n##    <dbl>\n##  1  0.23\n##  2  0.21\n##  3  0.23\n##  4  0.29\n##  5  0.31\n##  6  0.24\n##  7  0.24\n##  8  0.26\n##  9  0.22\n## 10  0.23\n## # ℹ 53,930 more rows\n# Method 3\ndat_diamond %>% select(1)## # A tibble: 53,940 × 1\n##    carat\n##    <dbl>\n##  1  0.23\n##  2  0.21\n##  3  0.23\n##  4  0.29\n##  5  0.31\n##  6  0.24\n##  7  0.24\n##  8  0.26\n##  9  0.22\n## 10  0.23\n## # ℹ 53,930 more rows\n# Method 4\ndat_diamond[, 1]## # A tibble: 53,940 × 1\n##    carat\n##    <dbl>\n##  1  0.23\n##  2  0.21\n##  3  0.23\n##  4  0.29\n##  5  0.31\n##  6  0.24\n##  7  0.24\n##  8  0.26\n##  9  0.22\n## 10  0.23\n## # ℹ 53,930 more rows\nmean(dat_diamond$carat)## [1] 0.7979397\n# OR\n\ndat_diamond %>% \n  pull(carat) %>% \n  mean(na.rm = TRUE)## [1] 0.7979397\n# OR\n\ndat_diamond %>% \n  select(carat) %>% \n  summarise(mean_carat = mean(carat))## # A tibble: 1 × 1\n##   mean_carat\n##        <dbl>\n## 1      0.798\n# OR\n\ndat_diamond %>% \n  summarise(mean_carat = mean(carat))## # A tibble: 1 × 1\n##   mean_carat\n##        <dbl>\n## 1      0.798\ndat_prem <- dat_diamond %>% \n  filter(cut == \"Premium\") %>% \n  rename(color = col) %>% \n  mutate(expensive = if_else(price > 5000, TRUE, FALSE))\n\n# OR\n\ndata_prem = dat_diamond %>% \n  filter(cut == \"Premium\") %>% \n  rename(color = col) %>% \n  mutate(expensive = case_when(price > 5000 ~ TRUE, \n                               price <= 5000 ~ FALSE))\ndat_prem %>% \n  arrange(desc(price)) %>% \n  head(5)## # A tibble: 5 × 11\n##   carat cut     color clarity depth table price     x     y     z expensive\n##   <dbl> <chr>   <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl>    \n## 1  2.29 Premium I     VS2      60.8    60 18823  8.5   8.47  5.16 TRUE     \n## 2  2.29 Premium I     SI1      61.8    59 18797  8.52  8.45  5.24 TRUE     \n## 3  2.04 Premium H     SI1      58.1    60 18795  8.37  8.28  4.84 TRUE     \n## 4  2    Premium I     VS1      60.8    59 18795  8.13  8.02  4.91 TRUE     \n## 5  1.71 Premium F     VS2      62.3    59 18791  7.57  7.53  4.7  TRUE"},{"path":"recitation-3.html","id":"part-ii-bonus","chapter":"3 Recitation 3","heading":"3.2 Part II (bonus)","text":"Find average price Premium diamonds color G. [Hint: last line code finds mean summarize(avg_price = mean(price)).]diamonds Good Fair cut, create new column called ‘discounted’ shows price 10% discount find mean standard deviation discounted prices. [Hint: last line code finds mean sd summarize(avg_discount = mean(price), sd_discount = sd(price)).]diamonds clarity VS1 carat greater 0.8, count number observations belong type cut arrange increasing order. [Hint: count frequencies categorical variable like cut, use count(cut). arranging, use arrange(n).]","code":"\ndat_prem %>% \n  filter(color == \"G\") %>% \n  summarize(avg_price = mean(price))## # A tibble: 1 × 1\n##   avg_price\n##       <dbl>\n## 1     4501.\ndat_diamond %>% \n  filter(cut %in% c(\"Good\", \"Fair\")) %>% \n  mutate(discounted = price * 0.9) %>% \n  summarize(avg_discount = mean(discounted),\n            sd_discount = sd(discounted))## # A tibble: 1 × 2\n##   avg_discount sd_discount\n##          <dbl>       <dbl>\n## 1        3632.       3291.\n# OR\n\ndat_diamond %>% \n  filter(cut == \"Good\" | cut == \"Fair\") %>% \n  mutate(discounted = 0.9*price) %>% \n  summarize(avg_discount = mean(discounted), \n            sd_discount = sd(discounted))## # A tibble: 1 × 2\n##   avg_discount sd_discount\n##          <dbl>       <dbl>\n## 1        3632.       3291.\ndat_diamond %>% \n  filter(clarity == \"VS1\" & carat > 0.8) %>% \n  count(cut) %>% \n  arrange(n)## # A tibble: 5 × 2\n##   cut           n\n##   <chr>     <int>\n## 1 Fair         82\n## 2 Good        255\n## 3 Very Good   629\n## 4 Premium     826\n## 5 Ideal       977\n# OR\n\ndat_diamond %>% \n  filter(clarity == \"VS1\" & carat > 0.8) %>% \n  group_by(cut) %>% \n  summarise(counts = n())## # A tibble: 5 × 2\n##   cut       counts\n##   <chr>      <int>\n## 1 Fair          82\n## 2 Good         255\n## 3 Ideal        977\n## 4 Premium      826\n## 5 Very Good    629"},{"path":"recitation-3.html","id":"additional-notes","chapter":"3 Recitation 3","heading":"3.2.1 Additional notes","text":"class, talked methods return single column data frame (aka, tibble) versus methods return single column vector values.return data frame:return vector:order use functions, like mean() need use pull() “$”. Keep mind future coding!","code":"\n# Method 1\ndat_diamond %>% select(carat)\n\n# Method 2\ndat_diamond[, 1]\n# Method 1\ndat_diamond %>% pull(carat)\n\n# Method 2\ndat_diamond$carat"},{"path":"recitation-4.html","id":"recitation-4","chapter":"4 Recitation 4","heading":"4 Recitation 4","text":"Today learned…pivots: pivot_longer(), pivot_wider()joins: right_join(), left_join(), inner_join(), full_join()worksheet help get accustomed using functions manipulate data.Load necessary packages first chunk code.Now, partner, please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-4.html","id":"part-i-2","chapter":"4 Recitation 4","heading":"4.1 Part I","text":"Load data ’ll need Part simply running code .Add index yr_data data frame via binding. Call index column resulting data frame idx.data currently wide long format? Justify answer complete sentence.[WIDE.]Create one year column put data currently stored columns 2001 2020 column called points. Save updated data frame yr_data_long.View tbi_age data decide format ’s . Justify answer.[LONG.]Transform data can see number_est age group along type injury_mechanism, like . Save data frame tbi_wide.","code":"\nyear <- paste(2001:2020)\nteam <- letters[1:length(year)]\nnum <- sample(c(1:100), size = length(year)^2, replace = TRUE)\n\nyr_data <- data.frame(matrix(num, nrow = length(year), ncol = length(year))) %>%\n  set_names(year)\n\nindex <- 1:20\n\ntbi_age <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-24/tbi_age.csv\")## Rows: 231 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (3): age_group, type, injury_mechanism\n## dbl (2): number_est, rate_est\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nyr_data <- bind_cols(idx = index, yr_data)\nyr_data_long <- pivot_longer(yr_data,\n                            cols = paste(2001:2020),\n                            names_to = \"year\",\n                            values_to = \"points\")## # A tibble: 21 x 13\n##    type  injury_mechanism  0-17   0-4<code>   5-14<\/code>   15-24   25-34   35-44   45-54\n##    <chr> <chr>             <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n##  1 Emer~ Motor Vehicle C~  47138   5464  19785  103892   71641   44108   40020\n##  2 Emer~ Unintentional F~ 397190 230776 133084   96568   70210   68830   95127\n##  3 Emer~ Unintentionally~ 229236  53436 120839  106679   44404   32479   30495\n##  4 Emer~ Other unintenti~  55785  12007  30656   37118   22360   17541   17808\n##  5 Emer~ Intentional sel~     NA     NA     NA     870     650     421     247\n##  6 Emer~ Assault           24360    674   9690   65399   57213   34100   27682\n##  7 Emer~ Other or no mec~  57983  19360  26022   33395   20974   16503   15962\n##  8 Hosp~ Motor Vehicle C~   5830    870   2395   12925   11050    7305    8490\n##  9 Hosp~ Unintentional F~   7935   4700   2270    3910    4470    5640   12010\n## 10 Hosp~ Unintentionally~   1985    510    980    1070     635     610     685\n## # ... with 11 more rows, and 4 more variables\ntbi_wide <- tbi_age %>% \n  pivot_wider(\n    id_cols = c(1, 2), \n    names_from = age_group,\n    values_from = number_est)\ntbi_wide## # A tibble: 21 × 13\n##    type        injury_mechanism `0-17`  `0-4` `5-14` `15-24` `25-34` `35-44` `45-54`\n##    <chr>       <chr>             <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n##  1 Emergency … Motor Vehicle C…  47138   5464  19785  103892   71641   44108   40020\n##  2 Emergency … Unintentional F… 397190 230776 133084   96568   70210   68830   95127\n##  3 Emergency … Unintentionally… 229236  53436 120839  106679   44404   32479   30495\n##  4 Emergency … Other unintenti…  55785  12007  30656   37118   22360   17541   17808\n##  5 Emergency … Intentional sel…     NA     NA     NA     870     650     421     247\n##  6 Emergency … Assault           24360    674   9690   65399   57213   34100   27682\n##  7 Emergency … Other or no mec…  57983  19360  26022   33395   20974   16503   15962\n##  8 Hospitaliz… Motor Vehicle C…   5830    870   2395   12925   11050    7305    8490\n##  9 Hospitaliz… Unintentional F…   7935   4700   2270    3910    4470    5640   12010\n## 10 Hospitaliz… Unintentionally…   1985    510    980    1070     635     610     685\n## # ℹ 11 more rows\n## # ℹ 4 more variables: `55-64` <dbl>, `65-74` <dbl>, `75+` <dbl>, Total <dbl>"},{"path":"recitation-4.html","id":"part-ii-1","chapter":"4 Recitation 4","heading":"4.2 Part II","text":"example, data frame head counts grain feeding producers another data frame head counts grass feeding producers; potentially overlap producers grain grass fed animals want merge one data frame. Note producer number unique, unique within state, need merge state producer number together.Load data Part II simply running code .Keep observations present grass data frame join grain data frame using code . argument = c(\"producer\",\"state\") ?[ANSWER ]Add argument suffix = c(\"_grass\", \"_grain\") line code . argument ?[ANSWER ]Join data frames writing code keeps observations present grain.missing data? happen?Yes. property left_join right_join caused phenomenon. values occured left(right) table don’t occur right(left) table.Use join keeps observations occur either two data frames.Looking merged data frame, can tell whether producer 3 grass grain feeding producer? ?Producer 3 belongs grass feeding produce. grain-feeding count producer 3 NA, means grain-feeding animals.Use join keeps observations present data frames.dimensions merged data? see see?dimension merged data 3, 5. see result inner_join function output data item occurring left right dataframe.","code":"\ngrass <- tibble(\n  producer = c(1, 2, 3, 1),\n  state = c(\"NSW\", \"NSW\", \"QLD\", \"QLD\"),\n  count = c(59, 82, 37, 28)\n  )\n\ngrain <-  tibble(\n  producer = c(1, 1, 2, 4),\n  state = c(\"NSW\", \"QLD\", \"NSW\", \"QLD\"),\n  count = c(192, 21, 37, 81),\n  post_code = c(\"2680\", \"4700\", \"2650\", \"4715\")\n  )\ngg_lj <- left_join(grass, grain, by = c(\"producer\", \"state\"))\ngg_lj2 <- left_join(grass, grain, by = c(\"producer\", \"state\"), \n                    suffix = c(\"_grass\", \"_grain\"))\ngg_rj <- right_join(grass, grain, by = c(\"producer\", \"state\"), \n                    suffix = c(\"_grass\", \"_grain\"))\n\n# OR\n\ngg_rj <- left_join(grain, grass, by = c(\"producer\", \"state\"), \n                    suffix = c(\"_grain\", \"_grass\"))\ngg_fj <- full_join(grass, grain, by = c(\"producer\", \"state\"), \n                    suffix = c(\"_grass\", \"_grain\"))\ngg_ij <- inner_join(grass, grain, by = c(\"producer\", \"state\"), \n                    suffix = c(\"_grass\", \"_grain\"))"},{"path":"recitation-4.html","id":"part-iii-bonus-questions","chapter":"4 Recitation 4","heading":"4.3 Part III (Bonus Questions)","text":"Clean tbi data contains following age groups: 0-4, 5-17, 18-24, 25-34, 35-44, 45-54, 55-64, 65-74, 75+, Total. Keep data wide format. Save new data frame tbi_clean.Start farming data frame created Part II Q5. Add latitude longitude associated post code data set. code load file lat long info post code.","code":"\ntbi_clean <- tbi_wide %>% \n  mutate(`5-17` = `0-17` - `0-4`,\n         `18-24` = Total - (`0-17` + `25-34` + `35-44` + \n                              `45-54` + `55-64` + `65-74` + `75+`) \n  ) %>% \n  select(c(type, injury_mechanism, `0-4`, `5-17`, `18-24`, `25-34`:Total))\n\n# Check that the categories sum to the total\ntbi_clean %>% \n  mutate(Total2 = rowSums(across(`0-4`:`75+`), na.rm = T)) %>% \n  select(Total, Total2)## # A tibble: 21 × 2\n##      Total  Total2\n##      <dbl>   <dbl>\n##  1  334109  334109\n##  2 1213412 1213412\n##  3  433947  433947\n##  4  164935  164935\n##  5    2567    1423\n##  6  210450  210450\n##  7  172974  172974\n##  8   58765   58765\n##  9  150730  150730\n## 10    7090    7090\n## # ℹ 11 more rows\npcodes <- read_csv(\"http://garthtarr.com/data/aus_postcode_lat_long.csv\") %>% \n  rename(post_code = postcode)## Rows: 3312 Columns: 3\n## ── Column specification ────────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): postcode\n## dbl (2): lat, long\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ngg_location <- left_join(gg_fj, pcodes, by = \"post_code\")"},{"path":"recitation-5.html","id":"recitation-5","chapter":"5 Recitation 5","heading":"5 Recitation 5","text":"Today learned…String factor manipulation using stringr forcatsNow ’ll practice using functions learned class, ’ll also get experience learning functions written resource rather instructor!Load necessary packages first chunk code.Now, partner, please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-5.html","id":"part-i-strings","chapter":"5 Recitation 5","heading":"5.1 Part I: Strings","text":"Find length following using stringr function: ‘’, ‘like’, ‘programming’, NA.Write code returns logical (TRUE, FALSE) vector indicating whether ‘apple’, ‘banana’, ‘kiwi’ ‘pineapple’ contain letter ‘’.Write code returns logical (TRUE, FALSE) vector indicating whether ‘apple’, ‘banana’, ‘kiwi’ ‘pineapple’ contain vowels, ,e,,o,u.Write code replaces first vowel given ‘fruits’ variable ‘-’.Write code replaces vowels given ‘fruits’ variable ‘-’.letters built-character vector R contains 26 letters alphabet. Write single line code get following output:“, b, c, d, e, f, g, h, , j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z”Write single line code using stringr function get following output:Hint: outputs letters[-1] letters[-26]?Use paste0 function get output 7.","code":"\nstr_length(c(\"i\", \"like\", \"programming\", NA))## [1]  1  4 11 NA\nfruit <- c(\"apple\", \"banana\", \"kiwi\", \"pineapple\")\nstr_detect(fruit, \"a\")## [1]  TRUE  TRUE FALSE  TRUE\nstr_detect(fruit, \"[aeiou]\")## [1] TRUE TRUE TRUE TRUE\nfruits <- c(\"one apple\", \"two pears\", \"three bananas\")\nstr_replace(fruits, \"[aeiou]\", \"-\")## [1] \"-ne apple\"     \"tw- pears\"     \"thr-e bananas\"\nstr_replace_all(fruits, \"[aeiou]\", \"-\")## [1] \"-n- -ppl-\"     \"tw- p--rs\"     \"thr-- b-n-n-s\"\n# Method 1\nstr_flatten(letters, collapse = \", \")## [1] \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\"\n# Method 2\nstr_c(letters, collapse = \", \")## [1] \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\"\n#>  [1] \"a comes before b\" \"b comes before c\" \"c comes before d\"\n#>  [4] \"d comes before e\" \"e comes before f\" \"f comes before g\"\n#>  [7] \"g comes before h\" \"h comes before i\" \"i comes before j\"\n#> [10] \"j comes before k\" \"k comes before l\" \"l comes before m\"\n#> [13] \"m comes before n\" \"n comes before o\" \"o comes before p\"\n#> [16] \"p comes before q\" \"q comes before r\" \"r comes before s\" \n#> [19] \"s comes before t\" \"t comes before u\" \"u comes before v\" \n#> [22] \"v comes before w\" \"w comes before x\" \"x comes before y\" \n#> [25] \"y comes before z\"\nstr_c(letters[-26], \" comes before \", letters[-1])##  [1] \"a comes before b\" \"b comes before c\" \"c comes before d\" \"d comes before e\"\n##  [5] \"e comes before f\" \"f comes before g\" \"g comes before h\" \"h comes before i\"\n##  [9] \"i comes before j\" \"j comes before k\" \"k comes before l\" \"l comes before m\"\n## [13] \"m comes before n\" \"n comes before o\" \"o comes before p\" \"p comes before q\"\n## [17] \"q comes before r\" \"r comes before s\" \"s comes before t\" \"t comes before u\"\n## [21] \"u comes before v\" \"v comes before w\" \"w comes before x\" \"x comes before y\"\n## [25] \"y comes before z\"\npaste0(letters[-26], \" comes before \", letters[-1])##  [1] \"a comes before b\" \"b comes before c\" \"c comes before d\" \"d comes before e\"\n##  [5] \"e comes before f\" \"f comes before g\" \"g comes before h\" \"h comes before i\"\n##  [9] \"i comes before j\" \"j comes before k\" \"k comes before l\" \"l comes before m\"\n## [13] \"m comes before n\" \"n comes before o\" \"o comes before p\" \"p comes before q\"\n## [17] \"q comes before r\" \"r comes before s\" \"s comes before t\" \"t comes before u\"\n## [21] \"u comes before v\" \"v comes before w\" \"w comes before x\" \"x comes before y\"\n## [25] \"y comes before z\""},{"path":"recitation-5.html","id":"part-ii-factors","chapter":"5 Recitation 5","heading":"5.2 Part II: Factors","text":"bdays variable contains months year. Apply sort function . ? sort meaningful way?Create vector called month_levels lists months year order (.e., Jan, Feb, …).Create factor variable using bdays variable month_levels levels. Now sort new variable. changed?f vector containing 1000 samples alphabet following Poisson distribution lambda = 10. Count many letter sampled.Count many letter sampled show decreasing order.Use unique() function base R show unique letters sampled f.Use function forcats packages shows unique letters sampled f. function different base R function?fct_unique function specified factor variable. sort unique values according levels factor.","code":"\nbdays <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\nsort(bdays)## [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\nmonth_levels <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                   \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n# Method 1: base R method\nbdays_factor <- factor(bdays, levels = month_levels)\n\n# Method 2: forcats method\nbdays_factor2 <- bdays %>% as_factor()\nlevels(bdays_factor2) <- month_levels\n\nsort(bdays_factor)## [1] Jan Mar Apr Dec\n## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\nf <- factor(sample(letters)[rpois(1000, 10)])\nfct_count(f)## # A tibble: 22 × 2\n##    f         n\n##    <fct> <int>\n##  1 a         1\n##  2 b       128\n##  3 c        55\n##  4 d         5\n##  5 f         5\n##  6 h        20\n##  7 i         1\n##  8 j        36\n##  9 k        89\n## 10 l       130\n## # ℹ 12 more rows\nf %>% fct_count() %>% arrange(desc(n))## # A tibble: 22 × 2\n##    f         n\n##    <fct> <int>\n##  1 l       130\n##  2 b       128\n##  3 z       127\n##  4 m       116\n##  5 k        89\n##  6 s        89\n##  7 p        62\n##  8 c        55\n##  9 q        54\n## 10 w        40\n## # ℹ 12 more rows\nfct_count(f, sort = T)## # A tibble: 22 × 2\n##    f         n\n##    <fct> <int>\n##  1 l       130\n##  2 b       128\n##  3 z       127\n##  4 m       116\n##  5 k        89\n##  6 s        89\n##  7 p        62\n##  8 c        55\n##  9 q        54\n## 10 w        40\n## # ℹ 12 more rows\nunique(f)##  [1] z s b k q c l x p m w o j h d r f a v n u i\n## Levels: a b c d f h i j k l m n o p q r s u v w x z\nfct_unique(f)##  [1] a b c d f h i j k l m n o p q r s u v w x z\n## Levels: a b c d f h i j k l m n o p q r s u v w x z"},{"path":"recitation-6.html","id":"recitation-6","chapter":"6 Recitation 6","heading":"6 Recitation 6","text":"Today learned…Useful functions exploratory data analysis (EDA) like case_when(), group_by(), summarize().Now ’ll practice using functions learned class.Load necessary packages first chunk code.Please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-6.html","id":"part-i-3","chapter":"6 Recitation 6","heading":"6.1 Part I","text":"Import Airbnb data set bnb_data apply clean_names().Arrange data (save ) decreasing order price.Use if_else() create new variable called price_bin equals 1 Airbnb less average, 0 cheaper average.Use case_when() thing.Find mean, median, sd, min, max price variable neighborhood (neighborhood_group). Use group_by() summarize().many listings contain word “cozy” (“Cozy” “COZY”) names?4234 listings contain word “cozy”, “Cozy”, “COZY”.neighborhood, find average price listings containing word “cozy”, “Cozy”, “COZY” names.Show name number listings 5 hosts listings containing words “cozy”, “Cozy”, “COZY”.Use str() see data types variables. Change minimum_nights variable factor variable.Group room type count number Airbnbs level minimum_nights.","code":"\nbnb_data <- read_csv(\"dataset/nyc_airbnb.csv\") %>% \n  janitor::clean_names()## Rows: 40753 Columns: 17\n## ── Column specification ────────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\n## dbl  (11): id, review_scores_location, host_id, lat, long, price, minimum_nights...\n## date  (1): last_review\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nbnb_data <- bnb_data %>% arrange(desc(price))\nbnb_data <- bnb_data %>% \n  mutate(price_bin = ifelse(price >= mean(price), 1, 0))\nbnb_data <- bnb_data %>% \n  mutate(price_bin = case_when(price >= mean(price) ~ 1,\n                               price < mean(price) ~ 0)\n  )\n\n# another version\nbnb_data <- bnb_data %>% \n  mutate(price_bin = case_when(price > mean(price) ~ 1,\n                               TRUE ~ 0)\n  )\nbnb_data %>% \n  group_by(neighbourhood_group) %>% \n  summarize(mean = mean(price),\n            sd = sd(price),\n            min = min(price),\n            max = max(price))## # A tibble: 5 × 5\n##   neighbourhood_group  mean    sd   min   max\n##   <chr>               <dbl> <dbl> <dbl> <dbl>\n## 1 Bronx                82.8  77.3    20   862\n## 2 Brooklyn            120.  184.     10 10000\n## 3 Manhattan           180.  238.     10  9999\n## 4 Queens               94.7 123.     12  6050\n## 5 Staten Island       128.  333.     22  5000\nbnb_data %>% \n  filter(str_detect(name, 'cozy|Cozy|COZY')) %>% \n  nrow()## [1] 4234\nbnb_data %>% \n  filter(str_detect(name, 'cozy|Cozy|COZY')) %>% \n  group_by(neighbourhood_group) %>% \n  summarize(mean = mean(price))## # A tibble: 5 × 2\n##   neighbourhood_group  mean\n##   <chr>               <dbl>\n## 1 Bronx                63.4\n## 2 Brooklyn             90.4\n## 3 Manhattan           125. \n## 4 Queens               76.1\n## 5 Staten Island        76.3\nbnb_data %>% \n  filter(str_detect(name, 'cozy|Cozy|COZY')) %>% \n  arrange(desc(calculated_host_listings_count)) %>% \n  select(host_name, calculated_host_listings_count) %>% \n  unique() %>% \n  head(5)## # A tibble: 5 × 2\n##   host_name calculated_host_listings_count\n##   <chr>                              <dbl>\n## 1 Luffy                                 14\n## 2 Digna                                 11\n## 3 Ming                                  11\n## 4 Shirley                               10\n## 5 Len                                   10\n# Danielle's Version\nbnb_data %>% \n  filter(str_detect(name, \"cozy|Cozy|COZY\")) %>% \n  group_by(host_id) %>% \n  reframe(name = host_name,\n          cozy_count = n()) %>% \n  distinct() %>% \n  arrange(desc(cozy_count)) %>% \n  head(5)## # A tibble: 5 × 3\n##    host_id name    cozy_count\n##      <dbl> <chr>        <int>\n## 1 31304940 John             8\n## 2 89388277 Maria            7\n## 3  5853457 Stanley          6\n## 4 17638424 Sophie           6\n## 5    59777 Thais            5\n# Lidio's Version\nbnb_data %>% \n  filter(str_detect(name, \"cozy|Cozy|COZY\")) %>% \n  group_by(host_id, host_name) %>% \n  count(host_id) %>% \n  arrange(desc(n)) %>% \n  head(5)## # A tibble: 5 × 3\n## # Groups:   host_id, host_name [5]\n##    host_id host_name     n\n##      <dbl> <chr>     <int>\n## 1 31304940 John          8\n## 2 89388277 Maria         7\n## 3  5853457 Stanley       6\n## 4 17638424 Sophie        6\n## 5    59777 Thais         5\nstr(bnb_data)## tibble [40,753 × 18] (S3: tbl_df/tbl/data.frame)\n##  $ id                            : num [1:40753] 3103784 16429718 4737930 9528920 12955683 ...\n##  $ review_scores_location        : num [1:40753] 10 NA 8 9 8 NA 10 NA 10 NA ...\n##  $ name                          : chr [1:40753] \"A Private Room Near the Promenade\" \"Charming apt., prime location!!\" \"Spanish Harlem Apt\" \"Quiet, Clean, Lit @ LES & Chinatown\" ...\n##  $ host_id                       : num [1:40753] 9825443 13630810 1235070 3906464 35664632 ...\n##  $ host_name                     : chr [1:40753] \"Michael\" \"Lena\" \"Olson\" \"Amy\" ...\n##  $ neighbourhood_group           : chr [1:40753] \"Brooklyn\" \"Brooklyn\" \"Manhattan\" \"Manhattan\" ...\n##  $ neighbourhood                 : chr [1:40753] \"Brooklyn Heights\" \"Sheepshead Bay\" \"East Harlem\" \"Lower East Side\" ...\n##  $ lat                           : num [1:40753] -74 -74 -73.9 -74 -74 ...\n##  $ long                          : num [1:40753] 40.7 40.6 40.8 40.7 40.8 ...\n##  $ room_type                     : chr [1:40753] \"Private room\" \"Entire home/apt\" \"Entire home/apt\" \"Private room\" ...\n##  $ price                         : num [1:40753] 10000 10000 9999 9999 9998 ...\n##  $ minimum_nights                : num [1:40753] 2 6 5 99 2 90 1 1 1 1 ...\n##  $ number_of_reviews             : num [1:40753] 15 0 1 6 2 0 1 0 10 0 ...\n##  $ last_review                   : Date[1:40753], format: \"2015-10-25\" NA ...\n##  $ reviews_per_month             : num [1:40753] 0.43 NA 0.04 0.34 0.17 NA 0.13 NA 6.98 NA ...\n##  $ calculated_host_listings_count: num [1:40753] 1 1 1 1 1 1 8 1 2 1 ...\n##  $ availability_365              : num [1:40753] 365 63 0 83 365 92 365 0 364 0 ...\n##  $ price_bin                     : num [1:40753] 1 1 1 1 1 1 1 1 1 1 ...\nbnb_data <- bnb_data %>% \n  mutate(minimum_nights = as_factor(minimum_nights))\nbnb_data %>% \n  group_by(room_type) %>% \n  select(minimum_nights) %>% \n  count(minimum_nights)## Adding missing grouping variables: `room_type`## # A tibble: 125 × 3\n## # Groups:   room_type [3]\n##    room_type       minimum_nights     n\n##    <chr>           <fct>          <int>\n##  1 Entire home/apt 1               4926\n##  2 Entire home/apt 2               5343\n##  3 Entire home/apt 3               4063\n##  4 Entire home/apt 4               1509\n##  5 Entire home/apt 5               1400\n##  6 Entire home/apt 6                344\n##  7 Entire home/apt 7                894\n##  8 Entire home/apt 8                 54\n##  9 Entire home/apt 9                 24\n## 10 Entire home/apt 10               172\n## # ℹ 115 more rows\nbnb_data |>\n  group_by(room_type, minimum_nights) |>\n  summarise(\n    count = n()\n  )## `summarise()` has grouped output by 'room_type'. You can override using the\n## `.groups` argument.## # A tibble: 125 × 3\n## # Groups:   room_type [3]\n##    room_type       minimum_nights count\n##    <chr>           <fct>          <int>\n##  1 Entire home/apt 1               4926\n##  2 Entire home/apt 2               5343\n##  3 Entire home/apt 3               4063\n##  4 Entire home/apt 4               1509\n##  5 Entire home/apt 5               1400\n##  6 Entire home/apt 6                344\n##  7 Entire home/apt 7                894\n##  8 Entire home/apt 8                 54\n##  9 Entire home/apt 9                 24\n## 10 Entire home/apt 10               172\n## # ℹ 115 more rows"},{"path":"recitation-7.html","id":"recitation-7","chapter":"7 Recitation 7","heading":"7 Recitation 7","text":"Today learned…create nice summary tables gtsummary package.Now ’ll practice using functions learned class.Load necessary packages first chunk code.Please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-7.html","id":"part-i-4","chapter":"7 Recitation 7","heading":"7.1 Part I","text":"Load built-trial data set (gtsummary). contains data 200 patients received one two types chemotherapy (Drug Drug B). outcomes tumor response death.Apply tbl_summary trial data. Describe results sentences.Use tbl_summary summarize continuous variables trial data treatment. Show two decimals.Now compare two groups using add_p() function. see?Add column overall summary statistics (separated drug type).Add column N (N missing) variable.Add labels summary statistics row rather footnote. Also, change statistics show “Mean (SD)”.","code":"\ntrial %>% tbl_summary()\ntrial %>% \n  select(trt, age, marker, ttdeath) %>% \n  tbl_summary(by = trt, digits = all_continuous() ~ 2)\ntrial %>% \n  select(trt, age, marker, ttdeath) %>% \n  tbl_summary(by = trt, digits = all_continuous() ~ 2) %>% \n  add_p()\ntrial %>% \n  select(trt, age, marker, ttdeath) %>% \n  tbl_summary(by = trt, digits = all_continuous() ~ 2) %>% \n  add_p() %>%\n  add_overall()\ntrial %>% \n  select(trt, age, marker, ttdeath) %>% \n  tbl_summary(by = trt, digits = all_continuous() ~ 2) %>% \n  add_p() %>%\n  add_overall() %>% \n  add_n()\ntrial %>% \n  select(trt, age, marker, ttdeath) %>% \n  tbl_summary(by = trt, \n              statistic = all_continuous() ~ \"{mean} ({sd})\",\n              digits = all_continuous() ~ 2) %>% \n  add_p() %>%\n  add_overall() %>% \n  add_n() %>% \n  add_stat_label()"},{"path":"recitation-7.html","id":"part-ii-2","chapter":"7 Recitation 7","heading":"7.2 Part II","text":"Formulate interesting question using data set use functions ’ve learned far answer . can, create table results using gtsummary. groups present questions code!","code":"\n#Answering Kaylinn's Question\ntrial %>% \n  select(age, response, trt) %>% \n  mutate(response = ifelse(response == 1, \"Tumor Observed\", \"No Tumor\")) %>%\n  tbl_summary(by = trt)"},{"path":"recitation-8.html","id":"recitation-8","chapter":"8 Recitation 8","heading":"8 Recitation 8","text":"Today learned…create histograms, density plots, scatter plots, box plots, ggplot2.Now ’ll practice using functions learned class.Load necessary packages first chunk code.Now, partner, please work following exercises sequentially. may one way code exercises.","code":""},{"path":"recitation-8.html","id":"part-i-5","chapter":"8 Recitation 8","heading":"8.1 Part I","text":"worksheet, use mpg data set (ggplot2). Use command ?mpg console learn . type variable drv? many rows columns data set?drv character variable. 234 rows 11 columns data set.Create histogram engine displacement cars mpg data set. Set number bins 20. notice shape histogram?Create (stratified) density plot shows distribution city mpg Hyundais Jeeps. Set alpha 0.5. Write sentence describing results.Create boxplot shows distribution highway mileage distinct number cylinders. fun, make outlines boxes blue.Create scatter plot shows relationship city mileage highway mileage. Color points class, shape points year, set size points using cylinder variable. Set alpha 0.5 points. Write couple sentences plot.","code":"\n# May or may not need to write any code for this Q\nhead(mpg)## # A tibble: 6 × 11\n##   manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class  \n##   <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr>  \n## 1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compact\n## 2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compact\n## 3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compact\n## 4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compact\n## 5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compact\n## 6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compact\nmpg %>% \n  ggplot() +\n  geom_histogram(aes(x = displ), bins = 20, fill = \"steelblue\", color = \"black\") + \n  labs(\n    title = \"Barplot of displ\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))\nmpg %>% \n  filter(manufacturer %in% c(\"hyundai\", \"jeep\")) %>% \n  ggplot() +\n  geom_density(aes(x = cty,  fill = manufacturer), alpha = 0.5) + \n  labs(\n    title = \"Density plot of cty\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))\nmpg %>% \n  mutate(cyl_fct = cyl %>% as.factor()) %>%\n  ggplot() +\n  geom_boxplot(aes(x = cyl, y = hwy, group = cyl, fill = cyl_fct),\n               color = \"steelblue\") + \n  labs(\n    title = \"Boxplot of cyl\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))\nmpg %>% \n  mutate(year = as_factor(year)) %>% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy, color = class,\n                 shape = year, size = cyl), alpha = 0.5) + \n  labs(\n    title = \"Point plot of cty\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))"},{"path":"recitation-8.html","id":"part-ii-3","chapter":"8 Recitation 8","heading":"8.2 Part II","text":"Take plot Part problem 4 make values x-axis 4, 5, 6, 8 (.e., remove cylinder 7 plot).Let’s take plot Part problem 5 make readable. , create scatter plot shows relationship city mileage highway mileage. Color class , time, facet year number cylinders.","code":"\nmpg %>% \n  mutate(cyl = as_factor(cyl)) %>% \n  ggplot() +\n  geom_boxplot(aes(x = cyl, y = hwy, group = cyl, fill = cyl),\n               color = \"steelblue\") + \n  labs(\n    title = \"Boxplot of cyl\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))\n# change color map to virdis\nmpg %>% \n  mutate(cyl = as_factor(cyl)) %>% \n  ggplot() +\n  geom_boxplot(aes(x = cyl, y = hwy, group = cyl, fill = cyl),\n               color = \"steelblue\") + \n  labs(\n    title = \"Boxplot of cyl\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5)) +\n  scale_fill_viridis_d()\n# customize the color map\nmpg %>% \n  mutate(cyl = as_factor(cyl)) %>% \n  ggplot() +\n  geom_boxplot(aes(x = cyl, y = hwy, group = cyl, fill = cyl),\n               color = \"steelblue\") + \n  labs(\n    title = \"Boxplot of cyl\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5)) +\n  scale_fill_manual(values = c(\"tomato\", \"limegreen\", \"aquamarine\", \"orange\")) \nmpg %>% \n  ggplot() +\n  geom_point(aes(x = cty, y = hwy, color = class)) +\n  facet_grid(year ~ cyl) + \n  labs(\n    title = \"Point plot of cyt in sub-figures\"\n  ) + \n  theme_bw() + \n  theme(plot.title = element_text(hjust = 0.5))"}]
